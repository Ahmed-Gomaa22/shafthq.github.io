(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(2),a=n(6),o=(n(0),n(84)),i={id:"Get_Started",title:"Get Started",sidebar_label:"Usage"},c={unversionedId:"Get_Started",id:"Get_Started",isDocsHomePage:!1,title:"Get Started",description:"Web Driver",source:"@site/docs/Get_Started.md",permalink:"/SHAFT_Engine_Docusaurus/docs/Get_Started",editUrl:"https://mohabmohie.github.io/SHAFT_Engine_Docusaurus/edit/master/website/docs/Get_Started.md",sidebar_label:"Usage",sidebar:"someSidebar",previous:{title:"Features",permalink:"/SHAFT_Engine_Docusaurus/docs/Features"}},l=[{value:"Web Driver",id:"web-driver",children:[]},{value:"Browser Interactions",id:"browser-interactions",children:[{value:"Navigation",id:"navigation",children:[]},{value:"Browser Windows&#39; Manipulation",id:"browser-windows-manipulation",children:[]}]},{value:"Browser Interactions Demo",id:"browser-interactions-demo",children:[]},{value:"Element Interactions",id:"element-interactions",children:[]},{value:"Element Interactions demo (1)",id:"element-interactions-demo-1",children:[]},{value:"Element Interactions demo (2)",id:"element-interactions-demo-2",children:[]}],s={rightToc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"web-driver"},"Web Driver"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"In order to interact with web pages you will need an instance of ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.selenium.dev/documentation/en/webdriver/"}),"WebDriver"))),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"})," import org.openqa.selenium.WebDriver;\n\n    WebDriver driver = DriverFactory.getDriver();\n")),Object(o.b)("p",null,"Upon Executing this line ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#"}),"DriverFactory")," will detect your desired configuration from the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#"}),"properties files"),", if you have not set those don't worry, SHAFT has a set of\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#"}),"default configurations")," that will be used and you can always ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#"}),"edit configurations")," .",Object(o.b)("br",null),"\nExecution environment is defaulted to Local i.e tests will be run on your own machine, so SHAFT will use ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/bonigarcia/webdrivermanager"}),"webdrivermanager")," to auto-detect your operating system and the version of the default browser , searches for the appropriate WebDriver version on your machine and download it if it can't be found,and finally run it which is openning a new browser window."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"in order to close all running driver instances use")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"    DriverFactory.closeAllDrivers();\n")),Object(o.b)("h2",{id:"browser-interactions"},"Browser Interactions"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://mohabmohie.github.io/SHAFT_ENGINE/apidocs/com/shaft/gui/browser/BrowserActions.html"}),"BrowserActions")," class handles browser actions like navigation and window controls"),Object(o.b)("h3",{id:"navigation"},"Navigation"),Object(o.b)("h4",{id:"navigate-to-url"},"Navigate To URL"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'BrowserActions.navigateToURL(driver,"https://www.google.com/");\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Navigates to the specified URL if it's different from the current URL, else refreshes the current page."),Object(o.b)("li",{parentName:"ul"},"To confirm successful navigation to target URL you can add a string parameter containing text that should exist in the URL after navigation like this:")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),' BrowserActions.navigateToURL(driver,"https://www.google.com/","google");\n')),Object(o.b)("h4",{id:"navigate-back"},"Navigate Back"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.navigateBack(driver);\n")),Object(o.b)("p",null,"Navigates one step back from the browsers history"),Object(o.b)("h4",{id:"navigate-forward"},"Navigate Forward"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.navigateForward(driver);\n")),Object(o.b)("p",null,"Navigates one step forward from the browsers history"),Object(o.b)("h4",{id:"refresh-page"},"Refresh page"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.refreshCurrentPage(driver);\n")),Object(o.b)("p",null,"Refresh the current page."),Object(o.b)("h4",{id:"get-current-url"},"Get Current Url"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.getCurrentURL(driver);\n")),Object(o.b)("p",null,"Returns the URL of the current page  as a string"),Object(o.b)("h3",{id:"browser-windows-manipulation"},"Browser Windows' Manipulation"),Object(o.b)("h4",{id:"full-screen-window"},"Full Screen Window"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.fullScreenWindow(driver);\n")),Object(o.b)("p",null,"Resizes the current window to become full screen"),Object(o.b)("h4",{id:"close-current-window"},"Close Current Window"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.closeCurrentWindow\u200b(driver);\n")),Object(o.b)("p",null,"Closes the current browser window"),Object(o.b)("h4",{id:"get-window-title"},"Get Window Title"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.getCurrentWindowTitle(driver);\n")),Object(o.b)("p",null,"Returnss the current window title as a string"),Object(o.b)("h4",{id:"maximize-window"},"Maximize Window"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"BrowserActions.maximizeWindow(driver);\n")),Object(o.b)("p",null,"Maximizes current window size based on screen size minus 5%"),Object(o.b)("h4",{id:"resize-window"},"Resize Window"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"int width = 1440; // specify wanted window width\nint height =900; // specify wanted window height\nBrowserActions.setWindowSize\u200b(driver,width,height);\n\n")),Object(o.b)("p",null,"Resizes the current window size based on the provided width and height"),Object(o.b)("h4",{id:"get-window-size"},"Get Window Size"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"String windowSize = BrowserActions.getWindowSize(driver);\n")),Object(o.b)("p",null,"Returnss the current window size as a string"),Object(o.b)("h4",{id:"switching-windows-or-tabs"},"Switching Windows or tabs"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"String windowHandle = BrowserActions.getWindowHandle\u200b(driver); //store the current window handle\n/*\nsome code that opens a new window\n*/\n\ndriver.switchTo().window(windowHandle); // switch back to the original window\n\n")),Object(o.b)("p",null,"The method getWindowHandle\u200b() returns a String containing the window handle, which is a unique identifier to that window and is used to move between tabs and windows"),Object(o.b)("h4",{id:"get-page-source"},"Get Page Source\u200b"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"String pageSource = BrowserActions.getPageSource(driver);\n")),Object(o.b)("p",null,"Gets the current page source and returns it as a string"),Object(o.b)("h2",{id:"browser-interactions-demo"},"Browser Interactions Demo"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'import org.openqa.selenium.WebDriver;\nimport org.testng.annotations.Test;\n\nimport com.shaft.driver.DriverFactory;\nimport com.shaft.gui.browser.BrowserActions;\n\npublic class ShaftDemo {\n\n    int width = 515; \n    int height =500; \n    \n    @Test\n    public void browserActions_Demo() {\n        WebDriver driver = DriverFactory.getDriver();\n        BrowserActions.navigateToURL(driver,"https://www.google.com/","google");\n        System.out.println(BrowserActions.getCurrentURL(driver));\n        BrowserActions.navigateToURL(driver,"https://www.youtube.com/");\n        System.out.println(BrowserActions.getCurrentWindowTitle(driver));\n        BrowserActions.navigateBack(driver);\n        BrowserActions.navigateForward(driver);\n        BrowserActions.setWindowSize(driver, width, height);\n        System.out.println(BrowserActions.getWindowSize(driver));\n        DriverFactory.closeAllDrivers();\n    \n    }\n}\n')),Object(o.b)("p",null,"As you skim through the concole output you will notice the awesome reporting SHAFT provides for each performed action, and it gets even better, please see the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#"}),"reporting")," section for more on that."),Object(o.b)("h2",{id:"element-interactions"},"Element Interactions"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://mohabmohie.github.io/SHAFT_ENGINE/apidocs/com/shaft/gui/element/ElementActions.html"}),"ElementActions")," class is responsible for handling interactions with web elements. ",Object(o.b)("br",null)),Object(o.b)("h4",{id:"click-on-an-element"},"Click on an Element"),Object(o.b)("p",null,"In order to interact with elements appearing on web page you'll first need to locate the element using one of WebDriver's locating strategies(",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/By.html"}),"By methods"),") like ID, Class Name,\nXPath, CSS Selectors, link Text, Partial link text, Name, or Tag name."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'import org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\n\n// get a WebDriver instance \nWebDriver driver = DriverFactory.getDriver();\n// a By object is used to store the locator to your element\nprivate By elementLocator = By.id("sign_in_btn");\n//click on target element\nElementActions.click(driver,elementLocator);\n')),Object(o.b)("p",null,"The method click will wait for your target element to be interactable and then attempts to click on it using Selenium WebDriver, if that didn't work it will\nattempt to click using JavaScript"),Object(o.b)("h4",{id:"click-and-hold"},"Click And Hold"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'import org.openqa.selenium.By;\n\n ElementActions.clickAndHold(driver,By.cssSelector("div.hold_counter"));\n\n')),Object(o.b)("p",null,"Waits for the element to be clickable, and then clicks and holds it."),Object(o.b)("h4",{id:"double-click"},"Double Click\u200b"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'import org.openqa.selenium.By;\n\n// store the locator to your element\n  By elementLocator = By.className("double_click_btn");\n //Double click target element\n ElementActions.doubleClick(driver,elementLocator);\n')),Object(o.b)("h4",{id:"hover"},"Hover"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'import org.openqa.selenium.By;\n\n// The locator to your element\n  By elementLocator = By.tagName("span");\n //Hover over target element\n ElementActions.hover(driver,elementLocator);\n')),Object(o.b)("h4",{id:"drag-and-drop"},"Drag and drop"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Drag an element into a target element")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'\n  By sourceElement = By.id("draggable");    // Locator to the element you want to drag\n  By targetElement = By.id("destination");  // Locator to the destination element\n \n ElementActions.dragAndDrop(driver,sourceElement,targetElement);\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Drag an element to a specified position")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'\n  By sourceElement = By.id("draggable");    // Locator to the element you want to drag\n  int xPos= 500;\n  int yPos= 500;\n \n ElementActions.dragAndDrop(driver,sourceElement,xPos,yPos);\n')),Object(o.b)("h4",{id:"get-tag-name"},"Get Tag name"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"})," String TagName = ElementActions.getTagName(driver, ElementLocator);\n")),Object(o.b)("p",null,"Retrieves tag name from the target element and returns it as a string value."),Object(o.b)("h4",{id:"get-the-value-of-an-element-attribute"},"Get the value of an element attribute"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'// The locator to your element\n  By  googleSearchBox = By.cssSelector(".gLFyf.gsfi");\n //get the value of the \'name\' attribute\n String attributeValue = ElementActions.getAttribute(driver, googleSearchBox, "name");\n')),Object(o.b)("p",null,"Returns the value of the given attribute as a String,you will allso be able to see something like this\n",Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://live.staticflickr.com/65535/51492494310_076bca3fdc.jpg",alt:"report"}))," ",Object(o.b)("br",null),"\nin the automatically generated Allure report, for more on that see ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#"}),"Reporting"),"."),Object(o.b)("h4",{id:"get-the-value-of-a-css-property"},"Get the value of a CSS property"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),' String propertyValue = ElementActions.getCSSProperty\u200b(driver, elementLocator, "width");\n')),Object(o.b)("h4",{id:"get-context-handles"},"Get context handle\\s"),Object(o.b)("p",null,"you need to get the context handle in order to be able to switch back to it "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Return the handle for currently active context.")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"String currentContext = ElementActions.getContext(driver);\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Returns a list of unique handles for all the currently open contexts.")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"ElementActions.getContextHandles(driver);\n")),Object(o.b)("h4",{id:"switching-focus-to-a-different-context"},"Switching focus to a different context"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"ElementActions.setContext(currentContext);\n")),Object(o.b)("h4",{id:"insert-text-into-a-text-field"},"Insert text into a text field"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'ElementActions.type(driver, textFieldLocator, "any text you would like to type");\n')),Object(o.b)("h4",{id:"get-elements-count"},"Get elements count"),Object(o.b)("p",null,"to find the number of elements matching a specific locator"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"int numOfElements = ElementActions.getElementsCount(driver, locatorToMultipleElements);\n")),Object(o.b)("h2",{id:"element-interactions-demo-1"},"Element Interactions demo (1)"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'package shaftDemo;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.Test;\n\nimport com.shaft.driver.DriverFactory;\nimport com.shaft.gui.browser.BrowserActions;\nimport com.shaft.gui.element.ElementActions;\n\npublic class Demo {\n\n    private By searchBox = By.name("q");\n    private By results = By.cssSelector("h3.LC20lb");\n    @Test\n    public void method() {\n        WebDriver driver = DriverFactory.getDriver();\n        BrowserActions.navigateToURL(driver, "https://www.google.com");\n        ElementActions.type(driver, searchBox, "SHAFT_ENGINE");\n        ElementActions.keyPress(driver, searchBox, "ENTER");\n        int num = ElementActions.getElementsCount(driver, results);\n        System.out.println(num);\n        \n    }\n}\n\n')),Object(o.b)("h4",{id:"get-selected-option-from-a-drop-down"},"Get selected option from a drop down"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'//  Locator to the Drop Down element\n  By  dropDown = By.id("dropdown");\n //Retrieve selected text and store it in a string variable\n String SelectedItem = ElementActions.getAttribute(driver, googleSearchBox, "name");\n')),Object(o.b)("p",null,"Retrieves the selected text from the target drop-down list element and returns it as a string value."),Object(o.b)("h4",{id:"select-an-option-from-a-drop-down-list"},"Select an option from a drop down list"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'//  Locator to the Drop Down element\n  By  dropDown = By.id("dropdown");\n //Retrieve selected text and store it in a string variable\n  ElementActions.select(driver, dropDown, "Option 1");\n')),Object(o.b)("h2",{id:"element-interactions-demo-2"},"Element Interactions demo (2)"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'package shaftDemo;\n\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.annotations.Test;\n\nimport com.shaft.driver.DriverFactory;\nimport com.shaft.gui.browser.BrowserActions;\nimport com.shaft.gui.element.ElementActions;\n\npublic class DropDownDemo {\n\n    private By dropDown = By.id("dropdown");\n    \n    @Test\n    public void method() {\n        WebDriver driver = DriverFactory.getDriver();\n        BrowserActions.navigateToURL(driver, "https://the-internet.herokuapp.com/dropdown");\n        ElementActions.getSelectedText(driver, dropDown);\n        ElementActions.select(driver, dropDown, "Option 1");\n        ElementActions.getSelectedText(driver, dropDown);\n        \n    }\n        \n}\n\n\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"To verify the results you can use traditional String variables, check SHAFT results in the Allure report (as shown in the image below), or\nyou can use other ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"#"}),"verification")," techniques.\n",Object(o.b)("img",Object(r.a)({parentName:"li"},{src:"https://live.staticflickr.com/65535/51492098708_dd5f557495_z.jpg",alt:"report_2"}))," ",Object(o.b)("br",null))),Object(o.b)("h4",{id:"get-size-of-an-element"},"Get size of an element"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"})," String elementSize = ElementActions.getSize(driver, TargetElementLocator);\n")),Object(o.b)("p",null,"Retrieves element size from the target element and returns it as a string value."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"An alternative to using ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"#get-the-value-of-a-css-property"}),"getCSSProperty\u200b")," to get width and height values separately")))}b.isMDXComponent=!0}}]);