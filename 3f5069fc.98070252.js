(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{69:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return u})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return c}));var n=a(2),r=a(6),i=(a(0),a(95)),s={id:"Nums",title:"Numbers Validations",sidebar_labe:"Numbers Validations"},u={unversionedId:"Nums",id:"Nums",isDocsHomePage:!1,title:"Numbers Validations",description:"We can make many assertions and verifications on numbers by using the Class NumberValidationsBuilder through using the following methods:",source:"@site/docs/Nums.md",permalink:"/SHAFT_Engine_Docusaurus/docs/Nums",editUrl:"https://shafthq.github.io/SHAFT_Engine_Docusaurus/edit/master/website/docs/Nums.md",sidebar:"someSidebar",previous:{title:"Elements Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Elements"},next:{title:"Objects Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Objects"}},l=[{value:"isEqualTo():",id:"isequalto",children:[]},{value:"equals():",id:"equals",children:[]},{value:"doesNotEqual():",id:"doesnotequal",children:[]},{value:"isGreaterThanOrEquals():",id:"isgreaterthanorequals",children:[]},{value:"isGreaterThan():",id:"isgreaterthan",children:[]},{value:"isLessThanOrEquals():",id:"islessthanorequals",children:[]},{value:"isLessThan():",id:"islessthan",children:[]}],o={rightToc:l};function c(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h4",{id:"we-can-make-many-assertions-and-verifications-on-numbers-by-using-the-class-numbervalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on numbers by using the ",Object(i.b)("em",{parentName:"h4"},"Class NumberValidationsBuilder")," through using the following methods:"),Object(i.b)("h3",{id:"isequalto"},"isEqualTo():"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We use this method to check that the actual number is equal to the expected value."),Object(i.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),Object(i.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isEqualTo((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isEqualTo((Number) expectedValue).perform();\n    }\n}\n")),Object(i.b)("h3",{id:"equals"},"equals():"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"This method overrides the default object method equals and is the same as calling isEqualTo((Number) expectedValue).perform();* * So we use this method to check that the actual number is equal to the expected value."),Object(i.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),Object(i.b)("li",{parentName:"ul"},"This method returns a boolean value true if passed and throws AssertionError if failed (return value can be safely ignored).")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).equals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).equals((Number) expectedValue).perform();\n    }\n}\n")),Object(i.b)("h3",{id:"doesnotequal"},"doesNotEqual():"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We use this method to check that the actual number does not equal the expected value."),Object(i.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),Object(i.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).doesNotEqual((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).doesNotEqual((Number) expectedValue).perform();\n    }\n}\n")),Object(i.b)("h3",{id:"isgreaterthanorequals"},"isGreaterThanOrEquals():"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We use this method to check that the actual number is greater than or equal to the expected value."),Object(i.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),Object(i.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isGreaterThanOrEquals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isGreaterThanOrEquals((Number) expectedValue).perform();\n    }\n}\n")),Object(i.b)("h3",{id:"isgreaterthan"},"isGreaterThan():"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We use this method to check that the actual number is greater than the expected value."),Object(i.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),Object(i.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isGreaterThan((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isGreaterThan((Number) expectedValue).perform();\n    }\n}\n")),Object(i.b)("h3",{id:"islessthanorequals"},"isLessThanOrEquals():"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We use this method to check that the actual number is less than or equal to the expected value."),Object(i.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the number under test."),Object(i.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isLessThanOrEquals((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isLessThanOrEquals((Number) expectedValue).perform();\n    }\n}\n")),Object(i.b)("h3",{id:"islessthan"},"isLessThan():"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We use this method to check that the actual number is less than the expected value."),Object(i.b)("li",{parentName:"ul"},"expectedValue - the test data / expected value for the number under test."),Object(i.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().number((Number) actualNumber).isLessThan((Number) expectedValue).perform();\n        //make verification\n        Validations.verifyThat().number((Number) actualNumber).isLessThan((Number) expectedValue).perform();\n    }\n}\n")))}c.isMDXComponent=!0},95:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return p}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),c=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},d=function(e){var t=c(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=c(a),b=n,p=d["".concat(s,".").concat(b)]||d[b]||m[b]||i;return a?r.a.createElement(p,u(u({ref:t},o),{},{components:a})):r.a.createElement(p,u({ref:t},o))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=b;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:n,s[1]=u;for(var o=2;o<i;o++)s[o]=a[o];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);