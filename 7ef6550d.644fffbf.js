(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{75:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return d}));var i=a(2),n=a(6),r=(a(0),a(92)),o={id:"Elements",title:"Elements Validations",sidebar_labe:"Element Validations"},l={unversionedId:"Elements",id:"Elements",isDocsHomePage:!1,title:"Elements Validations",description:"We can make many assertions and verifications on web elements by using the Class WebDriverElementValidationsBuilder through using the following methods:",source:"@site/docs/Elements.md",permalink:"/SHAFT_Engine_Docusaurus/docs/Elements",editUrl:"https://mohabmohie.github.io/SHAFT_Engine_Docusaurus/edit/master/website/docs/Elements.md",sidebar:"someSidebar",previous:{title:"Browser Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Browser"},next:{title:"Numbers Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Nums"}},s=[{value:"exists():",id:"exists",children:[]},{value:"doesNotExist():",id:"doesnotexist",children:[]},{value:"matchesReferenceImage():",id:"matchesreferenceimage",children:[]},{value:"doesNotMatchReferenceImage():",id:"doesnotmatchreferenceimage",children:[]},{value:"attribute():",id:"attribute",children:[]},{value:"isSelected():",id:"isselected",children:[]},{value:"isChecked():",id:"ischecked",children:[]},{value:"isVisible():",id:"isvisible",children:[]},{value:"isEnabled():",id:"isenabled",children:[]},{value:"isNotSelected():",id:"isnotselected",children:[]},{value:"isNotChecked():",id:"isnotchecked",children:[]},{value:"isHidden():",id:"ishidden",children:[]},{value:"isDisabled():",id:"isdisabled",children:[]},{value:"text():",id:"text",children:[]}],c={rightToc:s};function d(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h4",{id:"we-can-make-many-assertions-and-verifications-on-web-elements-by-using-the-class-webdriverelementvalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on web elements by using the ",Object(r.b)("em",{parentName:"h4"},"Class WebDriverElementValidationsBuilder")," through using the following methods:"),Object(r.b)("h3",{id:"exists"},"exists():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check that the target element exists. "),Object(r.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation. ")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).exists().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).exists().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"doesnotexist"},"doesNotExist():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check that the target element does not exist. "),Object(r.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).doesNotExist().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).doesNotExist().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"matchesreferenceimage"},"matchesReferenceImage():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check that the target element matches a reference image (using the Artificial Intelligence library OpenCV). On the first test run this method will take a screenshot of the target element and the test will pass, and on following runs the element will be compared against that reference image. The reference images are stored under src/test/resources/DynamicObjectRepository for later maintenance. This method returns."),Object(r.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).matchesReferenceImage().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).matchesReferenceImage().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"doesnotmatchreferenceimage"},"doesNotMatchReferenceImage():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check that the target element does not match a reference image (using the Artificial Intelligence library OpenCV). On the first test run this method will take a screenshot of the target element and the test will pass, and on following runs the element will be compared against that reference image. The reference images are stored under src/test/resources/DynamicObjectRepository for later maintenance."),Object(r.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).doesNotMatchReferenceImage().perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).doesNotMatchReferenceImage().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"attribute"},"attribute():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against a certain element attribute if it is isEqualTo, Contians, equals, doesNotEqual, doesNotContain, isTrue, isFalse, ..."),Object(r.b)("li",{parentName:"ul"},"Needed parameters: elementAttribute - the target element attribute that will be checked against."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation. "),Object(r.b)("li",{parentName:"ul"},"Note that we can make other validations upon the attribute like:\n",Object(r.b)("em",{parentName:"li"},"isTrue")," , ",Object(r.b)("em",{parentName:"li"},"isFalse"),", ",Object(r.b)("em",{parentName:"li"},"isEqualTo"),", ",Object(r.b)("em",{parentName:"li"},"doseNotEqualTo"),", ",Object(r.b)("em",{parentName:"li"},"equals"),", ",Object(r.b)("em",{parentName:"li"},"contains"),", ",Object(r.b)("em",{parentName:"li"},"doseNotContain"),", ",Object(r.b)("em",{parentName:"li"},"isNull"),", ",Object(r.b)("em",{parentName:"li"},"isNotNull"),", etc. ")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().element(driver, locator).attribute(attributeName).perform();\n        //make verification\n        Validations.verifyThat().element(driver, locator).attribute(attributeName).perform();\n    }         \n}     \n")),Object(r.b)("h3",{id:"isselected"},"isSelected():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements selected attribute"),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isSelected().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isSelected().perform();\n        }\n}\n")),Object(r.b)("h3",{id:"ischecked"},"isChecked():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements checked attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isChecked().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isChecked().perform();\n        }\n}\n")),Object(r.b)("h3",{id:"isvisible"},"isVisible():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements hidden attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isVisible().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isVisible().perform();\n        }\n}\n")),Object(r.b)("h3",{id:"isenabled"},"isEnabled():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements disabled attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isEnabled().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isEnabled().perform();\n        }\n}\n")),Object(r.b)("h3",{id:"isnotselected"},"isNotSelected():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements selected attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isNotSelected().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isNotSelected().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"isnotchecked"},"isNotChecked():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements checked attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isNotChecked().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isNotChecked().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"ishidden"},"isHidden():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements hidden attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n        public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isHidden().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isHidden().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"isdisabled"},"isDisabled():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements disabled attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).isDisabled().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).isDisabled().perform();\n    }\n}\n")),Object(r.b)("h3",{id:"text"},"text():"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We use this method to check against the provided elements text attribute."),Object(r.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation."),Object(r.b)("li",{parentName:"ul"},"Note that we can make other validations upon the attribute like:\n",Object(r.b)("em",{parentName:"li"},"isTrue")," , ",Object(r.b)("em",{parentName:"li"},"isFalse"),", ",Object(r.b)("em",{parentName:"li"},"isEqualTo"),", ",Object(r.b)("em",{parentName:"li"},"doseNotEqualTo"),", ",Object(r.b)("em",{parentName:"li"},"equals"),", ",Object(r.b)("em",{parentName:"li"},"contains"),", ",Object(r.b)("em",{parentName:"li"},"doseNotContain"),", ",Object(r.b)("em",{parentName:"li"},"isNull"),", ",Object(r.b)("em",{parentName:"li"},"isNotNull"),", etc.")),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"    import com.shaft.validation.Validations;\n    public class Testing {\n        @Test\n            public void testValidations(){\n            //make assertion\n            Validations.assertThat().element(driver, locator).text().perform();\n            //make verification\n            Validations.verifyThat().element(driver, locator).text().perform();\n    }\n}\n")))}d.isMDXComponent=!0},92:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return h}));var i=a(0),n=a.n(i);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),d=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=d(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=d(a),u=i,h=b["".concat(o,".").concat(u)]||b[u]||m[u]||r;return a?n.a.createElement(h,l(l({ref:t},c),{},{components:a})):n.a.createElement(h,l({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=a[c];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);