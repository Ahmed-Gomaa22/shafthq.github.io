(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{104:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),d=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=d(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),h=n,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return a?i.a.createElement(m,r(r({ref:t},c),{},{components:a})):i.a.createElement(m,r({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:n,s[1]=r;for(var c=2;c<o;c++)s[c]=a[c];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}h.displayName="MDXCreateElement"},54:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return d}));var n=a(2),i=a(6),o=(a(0),a(104)),s={id:"Response",title:"Response Validations",sidebar_labe:"Response Validations"},r={unversionedId:"Validations/Response",id:"Validations/Response",isDocsHomePage:!1,title:"Response Validations",description:"We can make many assertions and verifications on API response by using the Class RestValidationsBuilder through using the following methods:",source:"@site/docs/Validations/Response.md",permalink:"/SHAFT_Engine_Docusaurus/docs/Validations/Response",editUrl:"https://shafthq.github.io/SHAFT_Engine_Docusaurus/edit/master/website/docs/Validations/Response.md",sidebar:"someSidebar",previous:{title:"Files Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Validations/Files"},next:{title:"ForceFail Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Validations/ForceFail"}},l=[{value:"isEqualToFileContent():",id:"isequaltofilecontent",children:[]},{value:"doesNotEqualFileContent():",id:"doesnotequalfilecontent",children:[]},{value:"containsFileContent():",id:"containsfilecontent",children:[]},{value:"doesNotContainFileContent():",id:"doesnotcontainfilecontent",children:[]},{value:"extractedJsonValue():",id:"extractedjsonvalue",children:[]},{value:"matchesSchema():",id:"matchesschema",children:[]},{value:"doesNotMatchSchema():",id:"doesnotmatchschema",children:[]}],c={rightToc:l};function d(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h4",{id:"we-can-make-many-assertions-and-verifications-on-api-response-by-using-the-class-restvalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on API response by using the ",Object(o.b)("em",{parentName:"h4"},"Class RestValidationsBuilder")," through using the following methods:"),Object(o.b)("h3",{id:"isequaltofilecontent"},"isEqualToFileContent():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object is equal to the expected file content."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).isEqualToFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).isEqualToFileContent(String fileRelativePath).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"doesnotequalfilecontent"},"doesNotEqualFileContent():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object is not equal to the expected file content. "),Object(o.b)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).doesNotEqualFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).doesNotEqualFileContent(String fileRelativePath).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"containsfilecontent"},"containsFileContent():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object contains the expected file content. "),Object(o.b)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),Object(o.b)("li",{parentName:"ul"},"This method returns a a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).containsFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).containsFileContent(String fileRelativePath).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"doesnotcontainfilecontent"},"doesNotContainFileContent():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object does not contain the expected file content. "),Object(o.b)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).doesNotContainFileContent(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).doesNotContainFileContent(String fileRelativePath).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"extractedjsonvalue"},"extractedJsonValue():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to to extract a certain value from the provided actual response object and check against it. "),Object(o.b)("li",{parentName:"ul"},"Needed parameters: jsonPath - JSONPath of the target value; the JSONPath expression that will be evaluated in order to extract the desired value ","[without the trailing $.]"," , please refer to these urls for examples: ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html"}),"https://support.smartbear.com/alertsite/docs/monitors/api/endpoint/jsonpath.html")," ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"http://jsonpath.com/"}),"http://jsonpath.com/"),"."),Object(o.b)("li",{parentName:"ul"},"This method returns a NativeValidationsBuilder object to continue building your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).extractedJsonValue(String jsonPath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).extractedJsonValue(String jsonPath).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"matchesschema"},"matchesSchema():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object matches the schema for the expected file content. "),Object(o.b)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat(.response(Object response).matchesSchema(String  fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).matchesSchema(String fileRelativePath).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"doesnotmatchschema"},"doesNotMatchSchema():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check if the content of the provided actual response object matches the schema for the expected file content. "),Object(o.b)("li",{parentName:"ul"},"Needed parameters: fileRelativePath - relative path to the target expected response file."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().response(Object response).doesNotMatchSchema(String fileRelativePath).perform();\n        //make verification\n        Validations.verifyThat().response(Object response).doesNotMatchSchema(String fileRelativePath).perform();\n    }\n}\n")))}d.isMDXComponent=!0}}]);