(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{74:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return u}));var n=a(2),i=a(6),o=(a(0),a(96)),c={id:"Objects",title:"Objects Validations",sidebar_labe:"Objects Validations"},s={unversionedId:"Objects",id:"Objects",isDocsHomePage:!1,title:"Objects Validations",description:"We can make many assertions and verifications on objects by using the Class NativeValidationsBuilder through using the following methods:",source:"@site/docs/Objects.md",permalink:"/SHAFT_Engine_Docusaurus/docs/Objects",editUrl:"https://shafthq.github.io/SHAFT_Engine_Docusaurus/edit/master/website/docs/Objects.md",sidebar:"someSidebar",previous:{title:"Numbers Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Nums"},next:{title:"Files Validations",permalink:"/SHAFT_Engine_Docusaurus/docs/Files"}},l=[{value:"isEqualTo():",id:"isequalto",children:[]},{value:"equals():",id:"equals",children:[]},{value:"doesNotEqual():",id:"doesnotequal",children:[]},{value:"contains():",id:"contains",children:[]},{value:"doesNotContain():",id:"doesnotcontain",children:[]},{value:"matchesRegex():",id:"matchesregex",children:[]},{value:"doesNotMatchRegex():",id:"doesnotmatchregex",children:[]},{value:"equalsIgnoringCaseSensitivity():",id:"equalsignoringcasesensitivity",children:[]},{value:"doesNotEqualIgnoringCaseSensitivity():",id:"doesnotequalignoringcasesensitivity",children:[]},{value:"isNull():",id:"isnull",children:[]},{value:"isNotNull():",id:"isnotnull",children:[]},{value:"isTrue():",id:"istrue",children:[]}],r={rightToc:l};function u(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},r,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h4",{id:"we-can-make-many-assertions-and-verifications-on-objects-by-using-the-class-nativevalidationsbuilder-through-using-the-following-methods"},"We can make many assertions and verifications on objects by using the ",Object(o.b)("em",{parentName:"h4"},"Class NativeValidationsBuilder")," through using the following methods:"),Object(o.b)("h3",{id:"isequalto"},"isEqualTo():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is equal to the expected value."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).isEqualTo((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).isEqualTo((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"equals"},"equals():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"This method overrides the default object method equals and is the same as calling isEqualTo(expectedValue).perform();"),Object(o.b)("li",{parentName:"ul"},"So we use this method to check that the actual object is equal to the expected value."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a boolean value true if passed and throws AssertionError if failed (return value can be safely ignored).")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).equals((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).equals((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"doesnotequal"},"doesNotEqual():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is not equal to the expected value."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).doesNotEqual((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).doesNotEqual((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"contains"},"contains():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object contains the expected value."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).contains((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).contains((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"doesnotcontain"},"doesNotContain():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object does not contain the expected value."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).doesNotContain((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).doesNotContain((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"matchesregex"},"matchesRegex():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object matches the expected regular expression."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected regular expression for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).matchesRegex((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).matchesRegex((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"doesnotmatchregex"},"doesNotMatchRegex():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object does not match the expected regular expression."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected regular expression for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).doesNotMatchRegex((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).doesNotMatchRegex((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"equalsignoringcasesensitivity"},"equalsIgnoringCaseSensitivity():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is equal to the expected value (ignoring case sensitivity)."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).equalsIgnoringCaseSensitivity((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).equalsIgnoringCaseSensitivity((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"doesnotequalignoringcasesensitivity"},"doesNotEqualIgnoringCaseSensitivity():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is not equal to the expected value (ignoring case sensitivity)."),Object(o.b)("li",{parentName:"ul"},"Needed parameters: expectedValue - the test data / expected value for the object under test."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).doesNotEqualIgnoringCaseSensitivity((Object) expectedValue)).perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).doesNotEqualIgnoringCaseSensitivity((Object) expectedValue)).perform();\n    }\n}\n")),Object(o.b)("h3",{id:"isnull"},"isNull():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is null."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).isNull().perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).isNull().perform();\n    }\n}\n")),Object(o.b)("h3",{id:"isnotnull"},"isNotNull():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is not null."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).isNotNull().perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).isNotNull().perform();\n    }\n}\n")),Object(o.b)("h3",{id:"istrue"},"isTrue():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is true."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).isTrue().perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).isTrue().perform();\n    }\n}\n")),Object(o.b)("h6",{id:"13-isfalse"},"13. isFalse():"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"We use this method to check that the actual object is false."),Object(o.b)("li",{parentName:"ul"},"This method returns a ValidationsExecutor object to set your custom validation message (if needed) and then perform() your validation.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"import com.shaft.validation.Validations;\npublic class Testing {\n    @Test\n    public void testValidations(){\n        //make assertion\n        Validations.assertThat().object((Object) actualObject).isFalse().perform();\n        //make verification\n        Validations.verifyThat().object((Object) actualObject).isFalse().perform();\n    }\n}\n")))}u.isMDXComponent=!0},96:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var r=i.a.createContext({}),u=function(e){var t=i.a.useContext(r),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},b=function(e){var t=u(e.components);return i.a.createElement(r.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},j=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,r=l(e,["components","mdxType","originalType","parentName"]),b=u(a),j=n,m=b["".concat(c,".").concat(j)]||b[j]||d[j]||o;return a?i.a.createElement(m,s(s({ref:t},r),{},{components:a})):i.a.createElement(m,s({ref:t},r))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=j;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,c[1]=s;for(var r=2;r<o;r++)c[r]=a[r];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);